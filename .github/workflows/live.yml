name: Montar e Enviar Vídeo

on:
  workflow_dispatch:
    inputs:
      id:
        description: 'ID do evento/live'
        required: true
        type: string
      video_principal:
        description: 'Caminho do vídeo principal (ex: videos/abc.mp4)'
        required: true
        type: string
      rodape_id:
        description: 'Caminho do rodapé.png'
        required: true
        type: string
      videos_extras:
        description: 'Caminhos dos vídeos extras, separados por vírgula'
        required: true
        type: string
      stream_url:
        description: 'URL do RTMP (Facebook ou outro)'
        required: true
        type: string
      rclone_conf:
        description: 'Conteúdo base64 do rclone.conf'
        required: true
        type: string

jobs:
  montar-video:
    runs-on: ubuntu-latest
    outputs:
      artefato-path: artefatos/video_final
    steps:
      - name: 📥 Clonar repositório
        uses: actions/checkout@v4

      - name: 📦 Instalar dependências
        run: |
          sudo apt update
          sudo apt install -y ffmpeg jq rclone git
          echo '{}' > package.json
          npm install puppeteer

      - name: 📄 Salvar rclone.conf
        run: |
          mkdir -p ~/.config/rclone
          echo "${{ inputs.rclone_conf }}" | base64 -d > ~/.config/rclone/rclone.conf

      - name: 📄 Salvar sacredi.json decodificando base64
        run: |
          echo "${{ secrets.SACREDI_BASE64 }}" | base64 -d > sacredi.json
          echo "📄 Conteúdo decodificado de sacredi.json:"
          cat sacredi.json
          echo "--- FIM ---"

      - name: 📃 Processar vídeos extras
        run: |
          IFS=',' read -ra EXTRAS <<< "${{ inputs.videos_extras }}"
          printf '%s\n' "${EXTRAS[@]}" | jq -R . | jq -s . > extras.json

      - name: 📝 Criar input.json com todos os dados
        run: |
          jq -n --arg id "${{ inputs.id }}" \
            --arg video_principal "${{ inputs.video_principal }}" \
            --arg rodape_id "${{ inputs.rodape_id }}" \
            --arg stream_url "${{ inputs.stream_url }}" \
            --slurpfile sacredi sacredi.json \
            --slurpfile extras extras.json \
            '
            ($sacredi[0][0] // {}) as $s |
            {
              id: $id,
              video_principal: $video_principal,
              video_inicial: ($s.video_inicial // ""),
              video_miraplay: ($s.video_miraplay // ""),
              video_final: ($s.video_final // ""),
              logo_id: ($s.logo_id // ""),
              rodape_id: $rodape_id,
              videos_extras: ($extras[0] // []),
              stream_url: $stream_url
            }
            ' > input.json

      - name: 📂 Mostrar input.json final
        run: |
          echo "📄 Conteúdo do input.json:"
          cat input.json
          echo "--- FIM ---"

      - name: 🧠 Executar script de montagem (unir.js)
        run: node unir.js

      - name: 💾 Upload artefatos da montagem
        uses: actions/upload-artifact@v4
        with:
          name: artefatos-video-final
          path: artefatos/video_final

      - name: 🚀 Enviar artefatos para repositório Turb2025/Live
        env:
          GIT_TOKEN: ${{ secrets.DEST_REPO_PAT }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git clone https://${GIT_TOKEN}@github.com/Turb2025/Live.git repo_destino
          cp -r artefatos/video_final/* repo_destino/
          cd repo_destino

          git add .
          git commit -m "Atualizar artefatos vídeo final - ID: ${{ github.event.inputs.id }}" || echo "Nada para commitar"
          git push
